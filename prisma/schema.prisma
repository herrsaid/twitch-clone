
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model user {
  id String @id @default(uuid())
  username String @unique
  imageUrl String @db.Text
  externalUserId String @unique
  bio String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  following follow[] @relation("Following")
  followers follow[] @relation("FollowedBy")

  blocking block[] @relation("Blocking")
  blockedBy block[] @relation("BlockedBy")

  stream stream?
}

model follow {
  id String @id @default(uuid())
  followerId String
  followingId String

  follower user @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following user @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model block {
  id String @id @default(uuid())
  blockerId String
  blockedId String

  blocker user @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked user @relation(name: "BlockedBy", fields: [blockedId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockedId, blockerId])
  @@index([blockerId])
  @@index([blockedId])
}

model stream {
  id String @id() @default(uuid())
  name String
  thumbnailUrl String?

  ingressId String? @unique
  serverId String? @db.Text
  streamKey String? @db.Text

  isLive Boolean @default(false)
  isChatEnabled Boolean @default(true)
  isChatDelayed Boolean @default(false)
  isChatFollowerOnly Boolean @default(false)

  userId String @unique
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
}